授权

权限系统的作用
    列如一个学校图书馆的管理系统,如果是普通学生登录就能看到借书还书的相关功能,不可能让他
   看到并且去使用添加书籍信息,删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了。
   应该就能看到并使用添加书籍信息,删除书籍信息等功能。

    总结起来就是不同的用户可以使用不同的功能。这就是权限系统要去实现的效果。
   我们不能只依赖前端去判断用户的权限来选择显示那些菜单按钮。因为如果只是这样，如果有人知道了
   对应的接口地址就可以不通过前端,直接去发送请求来实现相关的操作。

    所以我们还需要在后台进行用户权限的判断,判断当前用户是否有相应的权限,必须基于所需权限才能进行相应的操作。



授权的基本流程
    在Spring Security中,会使用默认的FilterSecurityInterceptor来进行权限效验。
    在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication,
    然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。
    所以我们在项目中只需要把当前登录用户的权限信息也存入Authentication.
    然后设置我们的资源所需要的权限即可。


授权实现

    1.限制访问资源所需权限
    Spring Security为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应的资源
    所需的权限。

    但是要使用它我们需要先开启相关配置。
    @EnableGlobalMethodSecurity(prePostEnable=true)

    然后就可以对应的注解。@PreAuthorize



    2.然后给UserDetails中权限集合赋值


自定义失败处理
    我们还希望在认证失败或者授权失败的情况下也能和我们的接口一样返回相同结构的json,这样可以让前端对响应进行统一的处理。
    要实现这个功能我们需要知道SpringSecurity的异常处理机制。

    在SpringSecurity中,如果我们在认证或者授权的时候出现了异常会被ExceptionTranslationFilter捕获到。
    在ExceptionTranslationFilter中会去判断是认证失败还是授权失败出现的异常。

    如果是认证过程中出现的异常会被封装成AuthenticationException然后调用AuthenticationEntryPoint对象的方法去进行异常处理。

    如果是授权过程中出现的异常会被封装成AccessDeniedException然后调用AccessDeniedHandler对象的方法去进行异常处理。
    所以如果我们需要自定义异常处理，我们只需要自定义AuthenticationEntryPoint和AccessDeniedHandler然后配置给SpringSecurity
    即可。

跨越
    浏览器处于安全的考虑，使用XMLHttpRequest对象发起HTTP请求时必须遵循同源策略，否则就是跨域的HTTP请求，
    默认情况下是被禁止的，同源策略要求源相同才能正常同学，即协议,域名,端口号都完全一致。

    前后端分离项目,前端项目和后端项目一般都不是同源的，所以肯定会存在跨域请求的问题。


遗留问题
    其它权限效验方法
        我们前面都是使用@PreAuthorize注解,然后在其中使用的是hasAuthority方法进行效验。Spring Security还为我们提供了其它方法。
        列如:
            hasAnyAuthority, hasRole,hasAnyRole等。

        这里我们先不着急去介绍这些方法,我们先去理解hasAuthority的原理，然后再去学习其他方法你就更容易理解，而不是死记硬背区别。
        并且我们也可以选择定义效验方法，实现我们自己的效验逻辑。

        hasAuthority方法实际是执行到了SecurityExpressionRoot的hasAuthority,大家只要断点调试即课知道它内部的效验原理。

        它内部其实是调用authentication的getAuthorities方法获取用户的权限列表，然后判断我们存入的方法参数数据在权限列表中。

        hasAnyAuthority方法可以传入多个权限，只有用户有其中任意一个权限都可以访问对应的资源。

        hasRole要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上ROLE_后再去比较，所以这种情况下要用用户对应的权限
        也要有ROLE_这个前缀才可以。

        hasAnyRole有任意的角色就可以访问。它内部也会把我们传入的参数拼接上ROLE_后再去比较。所以这种情况下要用用户对应的权限
        也要有ROLE_这个前缀才可以。








