简介
    spring security是spring 家族中的一个安全管理框架。相比与另外一个安全框架shiro,它提供了更丰富的功能，
社区资源也比Shiro丰富。
    一般来说中大型的项目都是使用Spring security来做安全框架，小项目用Shiro比较多，因为相比与Spring security,
shiro上手更加简单。
    一般Web应用的需要进行认证和授权。
        认证: 验证当前访问系统的是不是本系统的用户，并且确认具体是哪个用户
        授权: 经过认证后判断当前用户是否有权限进行某个操作。

    而认证和授权也是Spring Security作为安全框架的核心功能。

    编程中很多概念都是从现实中抽取出来的!!!!!



登录效验流程
    1.前端携带用户密码访问登录接口
    2.后端去和数据库中的用户名和密码进行校验
    3.如果正确，使用用户名/用户id,生成一个jwt
    4.把jwt响应给前端
    5.登录后访问其它请需要在请求头中携带token
    6.获取请求头中的token进行解析，获取userID
    7.根据userID获取用户的相关信息，如果有权限则允许访问相关资源。
    8.访问目标资源，响应给前端
    9.响应信息


spring security完整流程
    spring security其实就是由一个又一个过滤器组成的, 本质上就是一个过滤器链。

    核心过滤器有:
    UsernamePasswordAuthenticationFilter: 负责处理我们在登录页面填写了用户名和密码后的登录请求。入门案例的认证工作
    主要由他负责。
    ExceptionTranslationFilter: 处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException.
    FilterSecurityInterceptor: 负责权限校验的过滤器。


认证流程详解
    1.用户提交用户名和密码,被UsernamePasswordAuthenticationFilter拦截。
    2.封装Authentication对象,这时候最多只有用户名和密码,权限还没有
    3.调用authenticate方法到ProviderManager进行认证
    4.DaoAuthenticationProvider的authenticate方法进行认证
    5.调用loadUserByUsername方法查词用户
    6.在InMemoryUserDetailsManager,根据用户名去查询对应的用户及这个用户对应的权限信息。
            InMemoryUserDetailsManager是在内存中查找。

    7.把对应的用户信息包括去权限信息封装成UserDetails对象
    8.返回给DaoAuthenticationProvider的UserDetails对象
    9.在DaoAuthenticationProvider中通过PasswordEncoder对比UserDetails中的密码和Authentication的密码是否正确。
    10.如果正确就把UserDetails中的权限信息设置到Authentication对象中。
    11.返回Authentication对象到UsernamePasswordAuthenticationFilter
    12.如果上一步返回了Authentication对象就使用SecurityContextHolder.getContext().setAuthentication方法存储该对象。

    概念速查:
    Authentication接口: 它的实现类,表示当前访问系统的用户,封装了用户相关信息。
    AuthenticationManager接口: 定义了认证Authentication的方法。
    UserDetailsService接口: 加载用户特定数据的核心接口,里面定义了一个根据用户名查询用户信息的方法。
    UserDetails接口: 提供核心用户信息。通过UserDetailsService根据用户获取处理的用户信息封装成UserDetails对象返回。
        然后将这些信息封装到Authentication对象中，其他过滤器中会通过SecurityContextHolder来获取当前用户信息。


思路分析
    登录
        (1)自定义登录接口
            调用ProviderManager的方法进行认证,如果认证通过生成jwt
            把用户信息存入redis

        (2)自定义UserDetailsService
            在这个实现列中去查询数据库

    校验:
        (1)定义jwt认证过滤器
            获取token
            解析token获取其中的userid
            从redis中获取用户信息
            存入SecurityContextHolder